package com.aleksnik.showingplaces.ui.fragments;


import android.app.AlertDialog;
import android.app.ProgressDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.location.Location;
import android.os.AsyncTask;
import android.os.Build;
import android.os.Bundle;
import android.provider.Settings;
import android.support.annotation.Nullable;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;

import com.aleksnik.showingplaces.R;
import com.aleksnik.showingplaces.core.callback.SimpleMainCallback;
import com.aleksnik.showingplaces.model.NearestPlace;
import com.aleksnik.showingplaces.net.HttpRequest;
import com.aleksnik.showingplaces.net.RequestFactory;
import com.aleksnik.showingplaces.ui.adapters.NearestPlacesAdapter;
import com.aleksnik.showingplaces.util.ConnectivityChecker;
import com.aleksnik.showingplaces.util.DialogHelper;

import java.util.List;


public class NearestPlacesFragment extends GenericFragment {

    private RecyclerView mRecyclerView;
    private RecyclerView.Adapter mAdapter;
    private RecyclerView.LayoutManager mLayoutManager;
    private Location currentLocation;
    private ProgressDialog pDialog;
    private Context context;

    private String autoGeneratedUrlRequest;
    public static final String TAG = NearestPlacesFragment.class.getSimpleName();
    private final static String SELECTED_CATEGORY = "selected category";
    private String selectedCategory;


    public static Bundle buildArguments(String selectedCategory) {
        Bundle bundle = new Bundle();
        bundle.putSerializable(SELECTED_CATEGORY, selectedCategory);
        return bundle;
    }

    @Nullable
    @Override
    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        View view = inflater.inflate(R.layout.nearest_places_fragment, container, false);

        Log.d(TAG, "onCreateView: " + currentLocation);

        context = getActivity().getBaseContext();


        mRecyclerView = (RecyclerView) view.findViewById(R.id.places_list_recycler_view);

        mRecyclerView.setHasFixedSize(true);

        mLayoutManager = new LinearLayoutManager(getActivity());
        mRecyclerView.setLayoutManager(mLayoutManager);
        mRecyclerView.addItemDecoration(new ItemDecorationView());

        return view;
    }

    @Override
    public void onViewCreated(View view, @Nullable Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);

        AlertDialog.Builder dialogCreator;
        if (!ConnectivityChecker.isNetworkAvailable(getContext())) {
            dialogCreator = DialogHelper.createAlertDialog(getContext(), "Wi-Fi/Internet is not active. \n Wi-Fi/Internet connection gives you faster location");
            dialogCreator.setPositiveButton("OK", new DialogInterface.OnClickListener() {
                @Override
                public void onClick(DialogInterface dialog, int which) {
                    startActivityForResult(new Intent(Settings.ACTION_WIFI_SETTINGS), 100);
                }
            });
            dialogCreator.create().show();
        }
        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.LOLLIPOP_MR1) {
            if (!ConnectivityChecker.isLocationActive(getContext())) {
                dialogCreator = DialogHelper.createAlertDialog(getContext(), "GPS is not active. \n" + " Activated GPS gives you more accuracy location");
                dialogCreator.setPositiveButton("OK", new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        startActivityForResult(new Intent(Settings.ACTION_LOCATION_SOURCE_SETTINGS), 200);
                    }
                });
                dialogCreator.create().show();
            }
        }
        Bundle bundle = getArguments();
        if (bundle != null) {
            selectedCategory = (String) bundle.getSerializable(SELECTED_CATEGORY);
            Log.d("TAG", "selected category: " + selectedCategory);
        }

        currentLocation = mActivityBridge.getSPApplication().getGoogleFacade().getCurrentLocation(getActivity());
        Log.d("TAG", "Latitude location: " + currentLocation.getLatitude());
        Log.d("TAG", "Longtitude location: " + currentLocation.getLongitude());
        Log.d("TAG", "cover area : " + mActivityBridge.getSPApplication().getSharedDataManager().getCoverArea());


        autoGeneratedUrlRequest = RequestFactory.getUrlRequest(selectedCategory.toLowerCase(), currentLocation.getLatitude(), currentLocation.getLongitude(),
                mActivityBridge.getSPApplication().getSharedDataManager().getCoverArea());

        new GooglePlaces().execute();
    }

    private class GooglePlaces extends AsyncTask<Void, List<NearestPlace>, List<NearestPlace>> {
        @Override
        protected void onPreExecute() {

            pDialog = new ProgressDialog(getActivity());
            pDialog.setMessage(context.getResources().getString(R.string.wait_string));
            pDialog.setCancelable(false);
            pDialog.show();
            super.onPreExecute();
        }

        @Override
        protected List<NearestPlace> doInBackground(Void... voids) {
            HttpRequest request = new HttpRequest();

            request.callLocation(autoGeneratedUrlRequest, new NetCallBack());
            Log.d("TAG", "requestString: " + autoGeneratedUrlRequest);

            return request.getNearestPlaces();
        }

        @Override
        protected void onPostExecute(List<NearestPlace> result) {

            pDialog.cancel();

            super.onPostExecute(result);

            if (result != null) {

                mAdapter = new NearestPlacesAdapter(result, new ItemClicker());
                mRecyclerView.setAdapter(mAdapter);

            }
        }

    }

    private final class NetCallBack extends SimpleMainCallback {
        @Override
        public void onSuccessGetNearestPlaces(List<NearestPlace> nearestPlaces) {

        }

        @Override
        public void onError(String error) {
            hideProgressDialog();
            showShortToast(error);
        }
    }


    private final class ItemClicker implements NearestPlacesAdapter.OnItemClickListener {
        @Override
        public void onItemClick(NearestPlace nearestPlace) {
            Log.d("TAG", "selectedPlaceId " + nearestPlace.getPlaceId());
            mActivityBridge.getFragmentLauncher().launchPlaceDetailsInformationFragment(nearestPlace.getPlaceId());

        }
    }

}
